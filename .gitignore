
--------------
--EJ. 1
--------------

--Importamos la libreria Data.Char que tenga orden
import Data.Char

--Evalua True si x = Cadena de texto, es minuscula
esMin :: Char -> Bool
esMin x = isLower x 

----------------------------------------------------------------------------------
--Permite convertir una minuscula en un numero entero en el rango[0,25] 
letANat :: Char -> Int
letANat x = ord x - 97

--Inverso
natALet :: Int -> Char
natALet x =  chr (x+97)

--Desplazo n posiciones l si (posicion de l)+n > 25, restamos 26 para regresar a la posicion 0 y continuar el conteo)
desplazar :: Int -> Char -> Char
desplazar n l | (n >= 0) && (n <= 25) && (esMin l) && (letANat l + n <= 25) = natALet (letANat l + n)
	      | (n >= 0) && (n <= 25) && (esMin l) && (letANat l + n > 25) = natALet (letANat l + n - 26)
	      | otherwise = l


--Dada una Cadena retorna la cantidad de letras minusculas ne la misma
cantMinusc :: String -> Int
cantMinusc [] = 0
cantMinusc (x:xs)	| esMin x = 1 + cantMinusc xs
					| otherwise = cantMinusc xs

--Dado un l y una cadena cuenta la cantidad de veces que aparece l en la cadena
contar :: Char -> String -> Int
contar l [] = 0
contar l (x:xs)	| x == l = 1 + (contar l xs)
--contar l (x:xs)	| esMin x && x == l = 1 + (contar l xs)
				| otherwise = contar l xs

--------------
--EJ. 2
--------------

--Codfica una cadena desplazandose n
codificar :: Int -> String -> String
codificar n [] = []
codificar n (x:xs)	| n <= 25 = desplazar n x : codificar n xs
					| otherwise = desplazar (n - (div n 25)*25) x : codificar (n- (div n 25)*25) xs


--------------
--EJ. 3
--------------

--Decodifica una cadena desplazandose (26-n)
decodificar :: Int -> String -> String
decodificar n [] = []
decodificar n x | n <= 25 = (codificar (26-n) x)
decodificar n x | otherwise = (codificar (26-(n- (div n 25)*25)) x)

--------------
--EJ. 4
--------------

--Toma un porcentaje de la cantidad de veces que aparecen las letras

cantMinusc' :: String -> Float
cantMinusc' [] = 0
cantMinusc' x | (esMin (head x)) = 1 + cantMinusc' (tail x)
	      | otherwise = cantMinusc' (tail x)
contar' :: Char -> String -> Float
contar' x [] = 0
contar' x y | (head y) == x = 1 + contar' x (tail y)
	    | otherwise = contar' x (tail y)

contarporcentajes :: String -> String -> [Float]
contarporcentajes x y | x == [] || y == [] = []
		      | otherwise = [(100 * (contar' (head x) y))/cantMinusc' y] ++ contarporcentajes (tail x) y
frec :: String -> [Float]
frec [] = take 26 (repeat 0)
frec x = contarporcentajes ['a'..'z'] x
--frec [] = []
--frec  x = toEnum ( (contar (natALet 0) x / cantMinusc x) * 100 ) : []

--------------
--EJ. 5
--------------

contarelementos :: [a] -> Integer
contarelementos [] = 0
contarelementos x = 1 + contarelementos (tail x)

tomarN :: (Eq a) => Integer -> [a] -> [a]
tomarN n x | (n <= 0) || (x == []) = []
	   | otherwise = [head x] ++ tomarN (n-1) (tail x)

tomarLast :: (Eq a) => Integer -> [a] -> [a]
tomarLast n x | (n <= 0) || (x == []) = []
	      | otherwise = tomarLast (n-1) (init x) ++ [last x]

rotar :: (Eq a) => Integer -> [a] -> [a]
rotar x y | x == 0 || y == [] = []
	  | (contarelementos y < x) = rotar (x - contarelementos y) y
	  | otherwise = (tomarLast ((contarelementos y) - x) y) ++ (tomarN x y)

--------------
--EJ. 6
--------------

chi2 :: [Float] -> [Float] -> Float
chi2 [] [] = 0
chi2 (x:xs) (y:ys) = ((x-y)^2 / y) + chi2 xs ys

--------------
--EJ. 7
--------------

aux :: String -> [Integer] -> [Float]
aux x [] = []
aux x (z:zs) = chi2 (rotar z (frec x)) y : aux x zs
	where y = [12.52, 1.42, 4.67, 5.85, 13.67, 0.67, 1.01, 0.70, 6.24, 0.44, 0.01, 4.96, 3.15, 6.70, 8.67, 2.51, 0.88, 6.86, 7.97, 4.62, 3.92, 0.90, 0.02, 0.22, 0.90, 0.52]

minimo :: [Float] -> Float
minimo x | length x == 1 = head x
	 | (head x < head (tail x)) && (head x < minimo (tail x)) = head x
	 | otherwise = minimo (tail x)

posicion x [] = undefined
posicion x y | x == head y = 1
	     | otherwise = 1 + posicion x (tail y)

descifrar :: String -> String
descifrar x = decodificar (posicion (minimo (aux x [1..25])) (aux x [1..25])) x
